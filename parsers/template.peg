grammar template

document            <- template

template            <- text_ texts:(insertion text_)*  %make_template

inner_template      <- inner_text texts:(insertion inner_text)*  %make_template

text_               <- [^[]*

inner_text          <- [^[\]]*

insertion           <- "[" statements "]"

statements          <- _* (expr exprs:(expr_end _* expr)*)? _*  %make_statements

expr_end            <- _* ";" / "\n"

expr                <- assignment_expr / basic_expr

basic_expr          <- value / function_expr / call_expr

assignment_expr     <- name _* "=" _* basic_expr  %make_assignment

function_expr       <- "function" _* "(" function_args? ")" _* "{" statements "}"  %make_function

function_args       <- _* name _* ("," _* name _*)*

call_expr           <- name arg:("(" args:call_args? ")" / " "+ basic_expr / bracket_args)?  %make_call

call_args           <- _* basic_expr _* exprs:("," _* basic_expr _*)*

bracket_args        <- bracket_arg*

bracket_arg         <- "[" inner_template "]" [\s]*

value               <- string / number / boolean / null / list / object

string              <- '"' ("\\" . / [^"])* '"'  %make_string / "'" ("\\" . / [^'])* "'"  %make_string

number              <- ("0" / [1-9] [0-9]*) ("." [0-9]+)? (("e" / "E") ("+" / "-" / "") [0-9]+)?  %make_number

boolean             <- "true"  %make_boolean / "false"  %make_boolean

null                <- "null"  %make_none

list                <- "(" _* basic_expr _* ("," _* basic_expr _*)* ")"  %make_list

object              <- "{" _* pair _* ("," _* pair)* "}"  %make_object / "{" _* "}"  %make_object

pair                <- basic_expr _* "=" _* basic_expr  %make_pair

name                <- [a-zA-Z_] [a-zA-Z0-9_]*  %make_name

_                   <-  [\s] / comment

comment             <- line_comment / multiline_comment

line_comment        <- "//" [^\n]*

multiline_comment   <- "/*" (!"*/" .)* "*/"
